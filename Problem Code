#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>
#include <queue>
#include <set>
#include <cmath>
#include <map>

#define ll long long
#define pii pair<int,int>
#define vii vector<pair<int,int> >
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define INF 1000000000

using namespace std;

pii dir[4] = {{1,0}, {0,1}, {-1,0}, {0,-1}};

int n, d;
int a[1001][1001];
int visited[1001][1001];
int dist[1001][1001];
vii sp;
queue <pii> q;
priority_queue <pair<int, pair<int,int> > > pq;

int main(){
    
    // Input
    
    cin >> n >> d;
    for (int i = 0; i < n; i++){
        for (int j = 0; j < n; j++){
            char x; cin >> x;
            if (x == 'S'){
                sp.pb(mp(i,j));
                visited[i][j] = 1;
            }
            if (x == '#'){
                a[i][j] = -1;
                visited[i][j] = -1;
            }
            else dist[i][j] = -1;
        }
    }
    
    // Distance from any point to a wall
    
    for (int i = 0; i < n; i++){
        for (int j = 0; j < n; j++){
            if (a[i][j] == -1){
                q.push(mp(i,j));
            }
        }
    }
    while (!q.empty()){
        pii x = q.front();
        q.pop();
        for (int i = 0; i < 4; i++){
            int newn = x.first+dir[i].first;
            int newm = x.second+dir[i].second;
            if (newn >= 0 && newn < n && newm >= 0 && newm < n && dist[newn][newm] == -1){
                dist[newn][newm] = dist[x.first][x.second] + 1;
                q.push(mp(newn,newm));
            }
        }
    }
    
    // Possible center positions along with time
    
    for (int i = 0; i < sp.size(); i++){
        q.push(mp(sp[i].first,sp[i].second));
    }
    while (!q.empty()){
        pii x = q.front();
        q.pop();
        for (int i = 0; i < 4; i++){
            int newn = x.first+dir[i].first;
            int newm = x.second+dir[i].second;
            if (newn >= 0 && newn < n && newm >= 0 && newm < n && visited[newn][newm] == 0){
                visited[newn][newm] = visited[x.first][x.second] + 1;
                
                    // Check if possible for center to be there
                
                    if ((visited[newn][newm]-1) % d == 0){
                        if ((visited[newn][newm]-1)/d + 1 <= dist[newn][newm]){
                            q.push(mp(newn,newm));
                        }
                        else if ((visited[newn][newm]-1)/d < dist[newn][newm]){
                            q.push(mp(newn,newm));
                        }
                    }
                    else {
                        if ((visited[newn][newm]-1)/d + 1 <= dist[newn][newm]){
                            q.push(mp(newn,newm));
                        }
                    }
                
            }
        }
    }
    
    // Convert time to number of replications
    
    for (int i = 0; i < n; i++){
        for (int j = 0; j < n; j++){
            if (i == 2 && j == 5){
                
            }
            if (visited[i][j] > 0){
                if ((visited[i][j]-1) % d == 0){
                    if ((visited[i][j]-1)/d + 1 <= dist[i][j]){
                        visited[i][j] = (visited[i][j]-1)/d + 1;
                    }
                    else if ((visited[i][j]-1)/d <= dist[i][j]){
                        visited[i][j] = (visited[i][j]-1)/d;
                    }
                    else {
                        visited[i][j] = -1;
                    }
                }
                else {
                    if ((visited[i][j]-1)/d + 1 <= dist[i][j]){
                        visited[i][j] = (visited[i][j]-1)/d + 1;
                    }
                    else {
                        visited[i][j] = -1;
                    }
                }
            }
        }
    }
    
    // Expand replications from centers, large to small
    
    for (int i = 0; i < n; i++){
        for (int j = 0; j < n; j++){
            if (visited[i][j] > 0){
                pq.push(mp(visited[i][j],mp(i,j)));
            }
        }
    }
    while (!pq.empty()){
        pair<int, pair<int,int> > x = pq.top();
        pq.pop();
        a[x.second.first][x.second.second] = x.first;
        for (int i = 0; i < 4; i++){
            int newn = x.second.first+dir[i].first;
            int newm = x.second.second+dir[i].second;
            if (newn >= 0 && newn < n && newm >= 0 && newm < n && a[newn][newm] == 0){
                a[newn][newm] = x.first - 1;
                if (a[newn][newm] > 1){
                    pq.push(mp(x.first-1, mp(newn,newm)));
                }
            }
        }
    }
    
    // Check which cells are occupied
    
    int total = 0;
    for (int i = 0; i < n; i++){
        for (int j = 0; j < n; j++){
            if (a[i][j] > 0) total++;
        }
    }
    cout << total;
    
}

