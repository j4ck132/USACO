// Personally my proudest solve

#include <iostream>
#include <fstream>
#include <vector>
#include <limits.h>
#include <list>
#include <stack>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <cmath>
#include <iterator>
#include <map>
#include <set>
#include <cstring>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vii;

#define pb push_back
#define mp make_pair
#define f first
#define s second

int mod = 1000000007;

ll ppower[30];
void powdo(int n){
    if(n==0) ppower[0] = 1;
    else {
        ppower[n] = ((ppower[n-1] * 2) % mod);
    }
    if (n < 29) powdo(n+1);
}

ll NCR[300][300];

int n;
ll a, b;
string sa, sb;
vi numbers;
int q;

int dp[300][300][18][18][2];
int ansa[300][300];
int ansb[300][300];

char conchar(int x){
    if (x == 1) return '0';
    if (x == 2) return '1';
    if (x == 3) return '2';
    if (x == 4) return '3';
    if (x == 5) return '4';
    if (x == 6) return '5';
    if (x == 7) return '6';
    if (x == 8) return '7';
    return '8';
}

int main() {
    
    for (int i = 0; i < 300; i++){
        for (int j = 0; j < 300; j++){
            if (j == 0 || i == j) NCR[i][j] = 1;
            else {
                NCR[i][j] = NCR[i-1][j] + NCR[i-1][j-1] % mod;
            }
        }
    }
    powdo(0);
    
    cin >> n >> a >> b;
    a--;
    sa = to_string(a);
    sb = to_string(b);
    for (int i = 0; i < n; i++){
        int buf;
        cin >> buf;
        numbers.pb(buf);
    }
    
    if (sa.size() > 1){
        bool buf = true;
        for (int i = 1; i < sa.size(); i++){
            if (sa[i] == '0' && buf){
                int use = i-1;
                while (sa[use] == '1' && use >= 0){
                    if (use == 0) sa[0] = '0';
                    else sa[use] = '9';
                    use--;
                }
                if (use >= 0) sa[use] = conchar(int(sa[use])-48);
                buf = false;
            }
            if (!buf){
                sa[i] = '9';
            }
        }
    }
    if (sa[0] == '0' && sa.size() > 1) sa.erase(0,1);
    if (sb.size() > 1){
        bool buf = true;
        for (int i = 1; i < sb.size(); i++){
            if (sb[i] == '0' && buf){
                int use = i-1;
                while (sb[use] == '1' && use >= 0){
                    if (use == 0) sb[0] = '0';
                    else sb[use] = '9';
                    use--;
                }
                if (use >= 0) sb[use] = conchar(int(sb[use])-48);
                buf = false;
            }
            if (!buf){
                sb[i] = '9';
            }
        }
    }
    if (sb[0] == '0') sb.erase(0,1);
       
    for (int l1 = 0; l1 < n; l1++){
        if (a != 0) {
            for (int r1 = l1; r1 < n; r1++){
                for (int l2 = 0; l2 < sa.size(); l2++){
                    for (int r2 = l2; r2 < sa.size(); r2++){
                        for (int less = 0; less < 2; less++){
                            
                            int val;
                            if (!less) val = int(sa[r2])-48;
                            else val = int(sa[r2])-49;
                            
                            if (r2-l2 > r1-l1) continue;
                            
                            if (l2 == r2){
                                dp[l1][r1][l2][r2][less] = 2*(numbers[r1] <= val);
                            }
                            
                            if (r1-l1 > r2-l2){
                                dp[l1][r1][l2][r2][less] += dp[l1][r1-1][l2][r2][less];
                                dp[l1][r1][l2][r2][less] %= mod;
                            }
                            
                            if (r2-l2 != 0){
                                    if (numbers[r1] <= val){
                                        dp[l1][r1][l2][r2][less] += dp[l1][r1-1][l2][r2-1][false];
                                        dp[l1][r1][l2][r2][less] %= mod;
                                    }
                                    else if (r2-l2 != 1 || sa[l2]-48 != 1){
                                        dp[l1][r1][l2][r2][less] += dp[l1][r1-1][l2][r2-1][true];
                                        dp[l1][r1][l2][r2][less] %= mod;
                                    }
                                
                                    if (numbers[r1] == int(sa[l2])-48 && (r2-l2 != 1 || val != 0)){
                                        dp[l1][r1][l2][r2][less] += dp[l1][r1-1][l2+1][r2][less];
                                        dp[l1][r1][l2][r2][less] %= mod;
                                    }
                                    else if (numbers[r1] < int(sa[l2])-48){
                                        dp[l1][r1][l2][r2][less] += (NCR[r1-l1][r2-l2] * ppower[r2-l2] % mod);
                                        dp[l1][r1][l2][r2][less] %= mod;
                                    }
                                }
                            dp[l1][r1][l2][r2][less] %= mod;
                            
                        }
                    }
                }
            }
        }
    }
    
    for (int i = 0; i < n; i++){
        for (int j = i; j < n; j++){
            ansa[i][j] = dp[i][j][0][sa.size()-1][false];
        }
    }
    
    for (int i = 0; i < n; i++){
        for (int j = i; j < n; j++){
            for (int k = 0; k < sb.size(); k++){
                for (int l = k; l < sb.size(); l++){
                    for (int m = 0; m < 2; m++){
                        dp[i][j][k][l][m] = 0;
                    }
                }
            }
        }
    }
    
    for (int l1 = 0; l1 < n; l1++){
        if (a != 0) {
            for (int r1 = l1; r1 < n; r1++){
                for (int l2 = 0; l2 < sb.size(); l2++){
                    for (int r2 = l2; r2 < sb.size(); r2++){
                        for (int less = 0; less < 2; less++){
                            
                            int val;
                            if (!less) val = int(sb[r2])-48;
                            else val = int(sb[r2])-49;
                            
                            if (r2-l2 > r1-l1) continue;
                            
                            if (l2 == r2){
                                dp[l1][r1][l2][r2][less] = 2*(numbers[r1] <= val);
                            }
                            
                            if (r1-l1 > r2-l2){
                                dp[l1][r1][l2][r2][less] += dp[l1][r1-1][l2][r2][less];
                                dp[l1][r1][l2][r2][less] %= mod;
                            }
                            
                            if (r2-l2 != 0){
                                    if (numbers[r1] <= val){
                                        dp[l1][r1][l2][r2][less] += dp[l1][r1-1][l2][r2-1][false];
                                        dp[l1][r1][l2][r2][less] %= mod;
                                    }
                                    else if (r2-l2 != 1 || sb[l2]-48 != 1){
                                        dp[l1][r1][l2][r2][less] += dp[l1][r1-1][l2][r2-1][true];
                                        dp[l1][r1][l2][r2][less] %= mod;
                                    }
                                
                                    if (numbers[r1] == int(sb[l2])-48 && (r2-l2 != 1 || val != 0)){
                                        dp[l1][r1][l2][r2][less] += dp[l1][r1-1][l2+1][r2][less];
                                        dp[l1][r1][l2][r2][less] %= mod;
                                    }
                                    else if (numbers[r1] < int(sb[l2])-48){
                                        dp[l1][r1][l2][r2][less] += (NCR[r1-l1][r2-l2] * ppower[r2-l2] % mod);
                                        dp[l1][r1][l2][r2][less] %= mod;
                                    }
                                }
                            dp[l1][r1][l2][r2][less] %= mod;
                            
                        }
                    }
                }
            }
        }
    }
    
    for (int i = 0; i < n; i++){
        for (int j = i; j < n; j++){
            ansb[i][j] = dp[i][j][0][sb.size()-1][false];
        }
    }
    
    cin >> q;
    if (sa.size() == sb.size()){
        for (int i = 0; i < q; i++){
            int l, r;
            cin >> l >> r;
            l--; r--;
            cout << ((ansb[l][r] - ansa[l][r]+mod)%mod) << endl;
        }
    }
    else {
        for (int i = 0; i < q; i++){
            int l, r;
            cin >> l >> r;
            l--; r--;
            ll use = 0;
            for (int i = sa.size(); i < sb.size(); i++){
                if (i <= r-l+1){
                    use += NCR[r-l+1][i] * ppower[i];
                    use %= mod;
                }
            }
            cout << ((ansb[l][r] + use - ansa[l][r] + mod)%mod) << endl;
        }
    }
    
}
