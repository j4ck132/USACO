#include <iostream>
#include <fstream>
#include <vector>
#include <limits.h>
#include <list>
#include <stack>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <cmath>
#include <iterator>
#include <map>
#include <set>
#include <cstring>
#include <queue>

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef vector<pii> vii;

#define pb push_back
#define mp make_pair
#define f first
#define s second

string s;
ll val[200005];
ll dp[2][200005][10];
ll ans[200005];

int main(){
    cin >> s;
    for (ll i = 0; i < s.length(); i++) {
        cin >> val[i];
    }
    
    for (ll i = 0; i < 2; i++){
        for (ll j = 0; j < 200005; j++){
            for (ll k = 0; k < 10; k++){
                if (j != 0 || k != 0) dp[i][j][k] = -1;
            }
            ans[j] = 1215752192;
        }
    }
    
    int cnt = 0;
    
    dp[0][0][0] = 0;
    if (s[0] == 'b') dp[0][0][1] = 0;
    // i is current char
    // j is how many bessies
    // k is letters of new bessie
    for (ll i = 1; i < s.length(); i++){
        for (int j = max(0,cnt-1); j <= cnt; j++){
            if (s[i] == "bessie"[5]){
                if (dp[(i+1)%2][j][5] != -1){
                    dp[i%2][j+1][0] = dp[(i+1)%2][j][5];
                    cnt = max(cnt, j+1);
                }
            }
            for (ll k = 0; k < 6; k++){
                if (dp[(i+1)%2][j][k] != -1 && (j != 0 || k != 0)){
                    if (dp[i%2][j][k] != -1 && k != 0) dp[i%2][j][k] = min(dp[i%2][j][k], dp[(i+1)%2][j][k] + val[i]);
                    else if (k!= 0) dp[i%2][j][k] = dp[(i+1)%2][j][k] + val[i];
                    if (k == 0){
                        if (dp[i%2][j][k] == -1) dp[i%2][j][k] = dp[(i+1)%2][j][k];
                        else dp[i%2][j][k] = min(dp[i%2][j][k], dp[(i+1)%2][j][k]);
                    }
                }
                if (s[i] == "bessie"[k-1] && k != 0){
                    if (dp[(i+1)%2][j][k-1] != -1){
                        if (dp[i%2][j][k] == -1) dp[i%2][j][k] = dp[(i+1)%2][j][k-1];
                        else dp[i%2][j][k] = min(dp[i%2][j][k], dp[(i+1)%2][j][k-1]);
                    }
                }
            }
        }
        ans[cnt] = min(ans[cnt], dp[i%2][cnt][0]);
        for (int j = max(0,cnt-1); j <= cnt; j++){
            for (ll k = 0; k < 6; k++){
                dp[(i+1)%2][j][k] = -1;
                if (j == 0 && k == 0) dp[(i+1)%2][j][k] = 0;
            }
        }
    }
    cout << cnt << endl << ans[cnt];
    
}
